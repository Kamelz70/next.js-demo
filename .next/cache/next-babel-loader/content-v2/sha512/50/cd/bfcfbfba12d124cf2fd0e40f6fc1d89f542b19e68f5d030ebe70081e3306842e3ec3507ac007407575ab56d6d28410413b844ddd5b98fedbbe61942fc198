{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\";\nimport { MongoClient, ObjectId } from \"mongodb\";\nexport default function MeetupDetailsPage(props) {\n  const {\n    id,\n    title,\n    image,\n    address,\n    description\n  } = props.meetup;\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(\"h1\", {\n      children: title\n    }), /*#__PURE__*/_jsx(\"h1\", {\n      children: id\n    }), /*#__PURE__*/_jsx(\"img\", {\n      src: image,\n      alt: \"\"\n    }), /*#__PURE__*/_jsx(\"address\", {\n      children: address\n    }), /*#__PURE__*/_jsx(\"h2\", {\n      children: description\n    })]\n  });\n}\nexport async function getStaticPaths() {\n  const uri = \"mongodb+srv://kamel:kamel123@cluster0.gs4eovp.mongodb.net/meetups?retryWrites=true&w=majority\"; // Create a MongoClient with a MongoClientOptions object to set the Stable API version\n\n  const client = new MongoClient(uri, {\n    serverApi: {\n      version: \"1\",\n      strict: true,\n      deprecationErrors: true\n    }\n  });\n  await client.connect();\n  const db = client.db();\n  const meetupCollection = db.collection(\"meetups\");\n  const result = await meetupCollection.find({}, {\n    projection: {\n      _id: 1\n    }\n  }).toArray();\n  client.close();\n  const meetupIds = result.map(meetup => {\n    return {\n      params: {\n        meetupId: meetup._id.toString()\n      }\n    };\n  });\n  return {\n    fallback: true,\n    paths: meetupIds\n  };\n}\nexport async function getStaticProps(context) {\n  const {\n    meetupId\n  } = context.params;\n  const uri = \"mongodb+srv://kamel:kamel123@cluster0.gs4eovp.mongodb.net/meetups?retryWrites=true&w=majority\"; // Create a MongoClient with a MongoClientOptions object to set the Stable API version\n\n  const client = new MongoClient(uri, {\n    serverApi: {\n      version: \"1\",\n      strict: true,\n      deprecationErrors: true\n    }\n  });\n  await client.connect();\n  const db = client.db();\n  const meetupCollection = db.collection(\"meetups\");\n  const result = await meetupCollection.findOne({\n    _id: new ObjectId(meetupId)\n  });\n  client.close();\n  return {\n    props: {\n      meetup: _objectSpread(_objectSpread({}, result), {}, {\n        id: result._id.toString(),\n        _id: null\n      })\n    }\n  };\n}","map":null,"metadata":{},"sourceType":"module"}